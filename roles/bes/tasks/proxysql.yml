---
# echo -e "[client]\nuser=admin\npassword=admin" > ~/.my.cnf
- name: Create .mycnf file for root user
  ansible.builtin.copy:
    dest: "{{ ansible_env.HOME }}/.my.cnf"
    mode: 0600
    content: |
      [client]
      user=admin
      password=admin

# rpm --import https://www.percona.com/downloads/RPM-GPG-KEY-percona
- name: install percona key
  ansible.builtin.rpm_key:
    key: https://www.percona.com/downloads/RPM-GPG-KEY-percona
    state: present

# dnf install https://repo.percona.com/yum/percona-release-latest.noarch.rpm
- name: Install percona repo
  ansible.builtin.package:
    name: 'https://repo.percona.com/yum/percona-release-latest.noarch.rpm'
    state: present
    update_cache: true

# dnf update 
- name: Update cache
  ansible.builtin.dnf: 
    update_cache: yes

# percona-release setup pxc-80
- name: percona-release setup pxc-80
  ansible.builtin.shell: echo 'y' | percona-release setup pxc-80

# ddnf install Percona-XtraDB-Cluster-client -y
- name: Install packages
  ansible.builtin.package:
    name: 
      - Percona-XtraDB-Cluster-client
      - proxysql2
      #- python3-PyMySQL
    state: latest

# systemctl restart percona
- name: Restart proxysql service
  ansible.builtin.service:
    name: proxysql
    state: restarted

# UPDATE global_variables SET variable_value='false' WHERE variable_name='admin-hash_passwords';
- name: Disable admin-hash_passwords, because Percona XtraDB Cluster uses caching_sha2_password
  ansible.builtin.shell: >
    mysql -h 127.0.0.1 -P 6032 -e "{{ item }}"
  loop:
    - "UPDATE global_variables SET variable_value='false' WHERE variable_name='admin-hash_passwords';"

# LOAD ADMIN VARIABLES TO RUNTIME; SAVE ADMIN VARIABLES TO DISK;
- name: Load and save proxysql config for admin variables
  ansible.builtin.shell: >
    mysql -h 127.0.0.1 -P 6032 -e "{{ item }}"
  loop:
    - "LOAD ADMIN VARIABLES TO RUNTIME;"
    - "SAVE ADMIN VARIABLES TO DISK;"

# INSERT INTO mysql_servers(hostgroup_id, hostname, port) VALUES (0,'10.10.10.x1',3306);
# INSERT INTO mysql_servers(hostgroup_id, hostname, port) VALUES (0,'10.10.10.x2',3306);
# INSERT INTO mysql_servers(hostgroup_id, hostname, port) VALUES (0,'10.10.10.x3',3306);
- name: Insert into mysql_servers (hostgroup_id, hostname, port)
  ansible.builtin.shell: >
    {% for host in groups.dbs %}
    mysql -h 127.0.0.1 -P 6032 -e "INSERT INTO mysql_servers(hostgroup_id, hostname, port) VALUES (0,'{{ hostvars[host].ansible_host }}',{{ mysql_port }});"
    {% endfor %}

# UPDATE global_variables SET variable_value='proxysql' WHERE variable_name='mysql-monitor_username';
# UPDATE global_variables SET variable_value='proxysql@Otus1234' WHERE variable_name='mysql-monitor_password';
- name: UPDATE global_variables mysql-monitor_username and mysql-monitor_password
  ansible.builtin.shell: >
    mysql -h 127.0.0.1 -P 6032 -e "{{ item }}"
  loop:
    - "UPDATE global_variables SET variable_value='{{ proxysql_user }}' WHERE variable_name='mysql-monitor_username';"
    - "UPDATE global_variables SET variable_value='{{ proxysql_pass }}' WHERE variable_name='mysql-monitor_password';"

# LOAD MYSQL VARIABLES TO RUNTIME;
# SAVE MYSQL VARIABLES TO DISK;
- name: Load and save proxysql config for variables
  ansible.builtin.shell: >
    mysql -h 127.0.0.1 -P 6032 -e "{{ item }}"
  loop:
    - "LOAD MYSQL VARIABLES TO RUNTIME;"
    - "SAVE MYSQL VARIABLES TO DISK;"

# LOAD MYSQL SERVERS TO RUNTIME;
- name: Enable monitoring of these nodes, load them at runtime
  ansible.builtin.shell: >
    mysql -h 127.0.0.1 -P 6032 -e "{{ item }}"
  loop:
    - "LOAD MYSQL SERVERS TO RUNTIME;"
    - "SAVE MYSQL SERVERS TO DISK;"

# INSERT INTO mysql_users (username,password) VALUES ('web_db_user','web_db_pass');
- name: Add user web_db_user to proxysql 
  ansible.builtin.shell: >
    mysql -h 127.0.0.1 -P 6032 -e "{{ item }}"
  loop:
    - "INSERT INTO mysql_users (username,password) VALUES ('{{ web_db_user }}','{{ web_db_pass }}');"

# LOAD MYSQL USERS TO RUNTIME;
# SAVE MYSQL USERS TO DISK;
- name: Load and save proxysql config for users
  ansible.builtin.shell: >
    mysql -h 127.0.0.1 -P 6032 -e "{{ item }}"
  loop:
    - "LOAD MYSQL USERS TO RUNTIME;"
    - "SAVE MYSQL USERS TO DISK;"
